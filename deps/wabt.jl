using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "wasm-interp", :wasm_interp),
    ExecutableProduct(prefix, "wat2wasm", :wat2wasm),
    ExecutableProduct(prefix, "wasm2c", :wasm2c),
    ExecutableProduct(prefix, "wast2json", :wast2json),
    ExecutableProduct(prefix, "wat-desugar", :wat_desugar),
    ExecutableProduct(prefix, "wasm2wat", :wasm2wat),
    ExecutableProduct(prefix, "wasm-validate", :wasm_validate),
    ExecutableProduct(prefix, "wasm-opcodecnt", :wasm_opcodecnt),
    ExecutableProduct(prefix, "wasm-objdump", :wasm_objdump),
    ExecutableProduct(prefix, "wasm-strip", :wasm_strip),
    ExecutableProduct(prefix, "spectest-interp", :spectest_interp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/tshort/WABTBuilder/releases/download/wabt1.0.12-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/WABT.v1.0.12.aarch64-linux-gnu.tar.gz", "85d8c81f77d7f9bfbfcdf1d1def68cd22049518b4b1393b79597f16347639a78"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/WABT.v1.0.12.aarch64-linux-musl.tar.gz", "eddb0ff97d0f25b8a6c4eb382e2cb736c76f3c4222fa25ef6b4f4ea13cba1f9a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/WABT.v1.0.12.arm-linux-gnueabihf.tar.gz", "4e54c5a3ed4f635d103654c1c268611ebc91eccf03f768bc947fe29268ce0785"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/WABT.v1.0.12.arm-linux-musleabihf.tar.gz", "5c540a333dc9c936ee2ecbdc79da911392739e8267b0c1bfbbcfb2f3fd598a0f"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/WABT.v1.0.12.i686-linux-gnu.tar.gz", "037c99ff46ffcb51f1f4411221eac527a4a0bdb5b2195673a914a0ffc3f4c9e1"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/WABT.v1.0.12.i686-linux-musl.tar.gz", "19d6a156b693d5e8986a19f5ebb9403e5534840c3c3979e82fac79e5984d4a61"),
    Windows(:i686) => ("$bin_prefix/WABT.v1.0.12.i686-w64-mingw32.tar.gz", "f40115a3ec355681a5b1fb621b7966407bedeec8a2c26263052ee69741072a55"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/WABT.v1.0.12.powerpc64le-linux-gnu.tar.gz", "c6862857ae849d2931356c2d33115892555aa75c80496810bcc6daf67b939af1"),
    MacOS(:x86_64) => ("$bin_prefix/WABT.v1.0.12.x86_64-apple-darwin14.tar.gz", "45c08bc24622af4cf90cdbcc0f35342b63e9279c984fe0051101a82ded692848"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/WABT.v1.0.12.x86_64-linux-gnu.tar.gz", "5a04b31e0399a9f92b171bc51c21565129bed3fc13ebc446bacbb8be43673fc3"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/WABT.v1.0.12.x86_64-linux-musl.tar.gz", "8b8e70b23e92dc9638c4af8d58619aec682b954fb371af91fd12a8c3621049d3"),
    FreeBSD(:x86_64) => ("$bin_prefix/WABT.v1.0.12.x86_64-unknown-freebsd11.1.tar.gz", "b5bfadfa94613afd8c1f09e99400e4880300f7297fa5b9afa5e80b0ede8a4266"),
    Windows(:x86_64) => ("$bin_prefix/WABT.v1.0.12.x86_64-w64-mingw32.tar.gz", "c3350f7b1d03a24309a8ed8ae52f6ad5dd49d8ed8a08f8c2453107359908719a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "wabt_deps.jl"), products, verbose=verbose)
