using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "wasm-as", :wasm_as),
    LibraryProduct(prefix, ["libbinaryen"], :libbinaryen),
    ExecutableProduct(prefix, "wasm-opt", :wasm_opt),
    ExecutableProduct(prefix, "wasm-shell", :wasm_shell),
    ExecutableProduct(prefix, "wasm2js", :wasm2js),
    ExecutableProduct(prefix, "wasm-reduce", :wasm_reduce),
    ExecutableProduct(prefix, "wasm-metadce", :wasm_metadce),
    ExecutableProduct(prefix, "wasm-dis", :wasm_dis),
    ExecutableProduct(prefix, "wasm-ctor-eval", :wasm_ctor_eval),
    ExecutableProduct(prefix, "wasm-emscripten-finalize", :wasm_emscripten_finalize),
    ExecutableProduct(prefix, "asm2wasm", :asm2wasm),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/MikeInnes/BinaryenBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.aarch64-linux-gnu.tar.gz", "540d7852bc16d1866faa2dcea8449f0fb52c26b4387355c4e5b3840ee15272d8"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.aarch64-linux-musl.tar.gz", "fff1a6a89bfe77157ab7c894e93b2e48793e65e85111e46fd984f33ced6296a5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/binaryen.v89.0.0.arm-linux-gnueabihf.tar.gz", "58a97e76d9d8beb571002f829e221dd6a5a8dcdadf9b0fa0bbb51e63718e0556"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/binaryen.v89.0.0.arm-linux-musleabihf.tar.gz", "25b5ed49bcedbe0f8b1ce7f11938b5ce2b6098da05008c90ecd968da27fcb6ec"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.i686-linux-gnu.tar.gz", "c42d006464d56708c12fe2cca05168f3152d178ab97f8229cc5bff1df27eab4f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.i686-linux-musl.tar.gz", "5ce5c965669fbe316cd38aa187505243c8ef0ed649e390fd5427ae72fd52b069"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.powerpc64le-linux-gnu.tar.gz", "9ded1207f5f31777d1798d115ea53d7b7519e4f8418d1c0237d5671d13b25c4f"),
    MacOS(:x86_64) => ("$bin_prefix/binaryen.v89.0.0.x86_64-apple-darwin14.tar.gz", "e7ca1b5723ea72713a66d869205e26e58b0384786c13ac832b653264b6651b7f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.x86_64-linux-gnu.tar.gz", "fda5ff0db9d04675540d078110595c8b85f4f8b239d33b45baf3ee34f79f75ec"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.x86_64-linux-musl.tar.gz", "ddc6fa557d9b00a3ecbd51cd01024032520e85a52b0f06c162c0c18d757d4376"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "binaryen_deps.jl"), products, verbose=verbose)
