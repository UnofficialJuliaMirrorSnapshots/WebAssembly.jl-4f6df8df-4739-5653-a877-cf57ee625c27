using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "wasm-as", :wasm_as),
    LibraryProduct(prefix, ["libbinaryen"], :libbinaryen),
    ExecutableProduct(prefix, "wasm-opt", :wasm_opt),
    ExecutableProduct(prefix, "wasm-shell", :wasm_shell),
    ExecutableProduct(prefix, "wasm2js", :wasm2js),
    ExecutableProduct(prefix, "wasm-reduce", :wasm_reduce),
    ExecutableProduct(prefix, "wasm-metadce", :wasm_metadce),
    ExecutableProduct(prefix, "wasm-dis", :wasm_dis),
    ExecutableProduct(prefix, "wasm-ctor-eval", :wasm_ctor_eval),
    ExecutableProduct(prefix, "wasm-emscripten-finalize", :wasm_emscripten_finalize),
    ExecutableProduct(prefix, "asm2wasm", :asm2wasm),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/MikeInnes/BinaryenBuilder/releases/download/v0.1.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.aarch64-linux-gnu.tar.gz", "e18ae91a94124a498aedcb1369d121f07aa3681c239c6728b2affbb6df8281c7"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.aarch64-linux-musl.tar.gz", "0c752505301ee5034b499322c8d36c968f088f705b3232bd9130a6f3faae7646"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/binaryen.v89.0.0.arm-linux-gnueabihf.tar.gz", "1d00a887129c9d804779c6ee2eac90ac27e67299839f7a57485bd9bccd93124f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/binaryen.v89.0.0.arm-linux-musleabihf.tar.gz", "4cf84e22f3c4a70e13317d363dd3e3a145f3c2638d2f2d8affb3d6405dbf00a3"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.i686-linux-gnu.tar.gz", "768663c436fa79b04fb539addb951ac3cc93d65481c0c513c2093425e75e9517"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.i686-linux-musl.tar.gz", "3d05f6eb63aaf0abe6558d9fb9ac7f5b1a93f366777b4ed166294dc80f1dc5c3"),
    Windows(:i686) => ("$bin_prefix/binaryen.v89.0.0.i686-w64-mingw32.tar.gz", "dfdf52f2d6d4dbb79b1e8b5c25ddb943fee0ae9761eeeba41f4b92f132f117f2"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.powerpc64le-linux-gnu.tar.gz", "b62dabb6181a759a7bebd112f8ad430b0135f8c5e7b24b60421f5cfc0579fed5"),
    MacOS(:x86_64) => ("$bin_prefix/binaryen.v89.0.0.x86_64-apple-darwin14.tar.gz", "8489865bff20dd0768779092fd8c07b84c3e87336608371c5f3dfc0dc5fecff2"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/binaryen.v89.0.0.x86_64-linux-gnu.tar.gz", "09aab18a65d46dcd38bbc840cdb71970a39aa8e3fdfbb0d126db3cb638a13102"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/binaryen.v89.0.0.x86_64-linux-musl.tar.gz", "bd2293de5ba9cb23a2e66e6c76f022c7db7337533e485ee06dbaa14d3f7324ca"),
    Windows(:x86_64) => ("$bin_prefix/binaryen.v89.0.0.x86_64-w64-mingw32.tar.gz", "bdb7b32dd00fbb9fd43484c268fe799113231968329dcff9ed72f53fe00f1ab1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "binaryen_deps.jl"), products, verbose=verbose)
